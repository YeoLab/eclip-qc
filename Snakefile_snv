import os

SAMPLES = ["4226_CLIP1_downsampled", "4226_CLIP2_downsampled"]
input_directory = 'examples/inputs'
output_directory = 'snv_pipeline_outputs'

rule all:
    input:
        os.path.join(output_directory, "plots", "quals.svg")
        

rule bwa_index:
    input:
        os.path.join(input_directory, "chr19.fa")
    output:
        os.path.join(output_directory, "chr19.fa.amb"),
        os.path.join(output_directory, "chr19.fa.ann"),
        os.path.join(output_directory, "chr19.fa.pac"),
        os.path.join(output_directory, "chr19.fa.bwt"),
        os.path.join(output_directory, "chr19.fa.sa")
    params:
        prefix=os.path.join(output_directory, "chr19.fa")
    conda:
        "envs/bwa.yaml"
    shell:
        "bwa index -p {params.prefix} {input}"
        
        
rule bwa_map:
    input:
        os.path.join(output_directory, "chr19.fa.amb"),
        os.path.join(output_directory, "chr19.fa.ann"),
        os.path.join(output_directory, "chr19.fa.pac"),
        os.path.join(output_directory, "chr19.fa.bwt"),
        os.path.join(output_directory, "chr19.fa.sa"),
        fastq=os.path.join(input_directory, "{sample}.fastq")
    output:
        os.path.join(output_directory, "mapped_reads", "{sample}.bam")
    params:
        reference=os.path.join(output_directory, "chr19.fa")
    conda:
        "envs/bwa.yaml"
    shell:
        "bwa mem {params.reference} {input.fastq} | samtools view -Sb - > {output}"


rule samtools_sort:
    input:
        os.path.join(output_directory, "mapped_reads", "{sample}.bam")
    output:
        os.path.join(output_directory, "sorted_reads", "{sample}.bam")
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools sort -T {output_directory}/sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"


rule samtools_index:
    input:
        os.path.join(output_directory, "sorted_reads", "{sample}.bam")
    output:
        os.path.join(output_directory, "sorted_reads", "{sample}.bam.bai")
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools index {input}"


rule bcftools_call:
    input:
        fa=os.path.join(input_directory, "chr19.fa"),
        bam=expand(os.path.join(output_directory, "sorted_reads", "{sample}.bam"), sample=SAMPLES),
        bai=expand(os.path.join(output_directory, "sorted_reads", "{sample}.bam.bai"), sample=SAMPLES)
    output:
        os.path.join(output_directory, "calls", "all.vcf")
    conda:
        "envs/bcftools.yaml"
    shell:
        "bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"


rule plot_quals:
    input:
        vcf=os.path.join(output_directory, "calls", "all.vcf")
    output:
        plot=os.path.join(output_directory, "plots", "quals.svg")
    conda:
        "envs/python3.yaml"
    shell:
        "scripts/plot-quals.py --input_file {input.vcf} --output_file {output.plot}"
